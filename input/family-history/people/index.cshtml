Title: Family Members
ArchiveSources: family-history/people/*
ArchiveOrderKey: Person
---
<style>
    .container { max-width: 100%; }
    #content { background: #e6f2ff; width: auto; border: 0; }
</style>

<p class="comment">
    This page is still under construction. Clicking on any of these cards
    will eventually take you to a page about the named person. However,
    at this time, most of those pages do not yet exist and clicking on the
    card has no effect. Clickable cards show the name in a bold font.
</p>

@{
    // Create lists of persons and individual surnames
    var persons = new List<IDocument>();
    var surnames = new List<string>();

    foreach (var doc in Document.GetChildren())
    {
        if (doc.ContainsKey("Person"))
        {
            persons.Add(doc);
            var name = doc.GetString("Person");
            int comma = name.IndexOf(',');
            if (comma > 0)
            {
                var surname = name.Substring(0, comma);
                if (!surnames.Contains(surname))
                    surnames.Add(surname);
            }
        }
    }
}

<!-- Display Filter UI -->
<div class="ml-4">

    <div style="float: left; whitespace: nowrap; margin: 0 20px;">
    <label for="surnames">Filter by surname:</label>
    <select name="surnames" id="surnames" width="20em" onchange="applyFilters()">
        <option selected>All surnames</option>

    @foreach(string surname in surnames)
    {
        <option>@surname</option>
    }

    </select>
    </div>

    <div style="float: left; whitespace: nowrap; margin: 0 20px;">
    <button onclick="clearFilter()">Clear Filter</button>
    </div>

    <div style="clear: both" />

</div>

<div style="display: flex; justify-content: center; flex-wrap: wrap;">

@foreach (var doc in persons)
{
    string link = Context.GetLink(doc);
    string name = doc.GetString("Person");
    bool hasData = !string.IsNullOrEmpty(doc.GetString("Excerpt"));

    string birth = FormatDate(doc.GetString("Birth"));
    if (string.IsNullOrEmpty(birth))
        birth = "??";

    string death = FormatDate(doc.GetString("Death"));
    if (string.IsNullOrEmpty(death))
        death = "??";

    if (hasData)
    {
        <div class="card family-member">
            <b><a class="stretched-link" href="@link">@name</a></b>
            <br>
        
        <span>@birth - @death</span>

        </div>
    }
    else
    {
        <div class="card family-member-nodata">
            @name
            <br>

        <span>@birth - @death</span>

        </div>
    }
}

</div>

@functions
{
    string FormatDate(string s)
    {
        DateTime dt;
        if (DateTime.TryParse(s, out dt))
        {
            string[] parts = s.Split(new char[] { ' ', ',', '/' });
            if (parts.Length == 3)
                return dt.ToString("dd MMM yyyy");

            return dt.ToString("MMM yyyy");
        }

        return s;
    }
}

<script lang="javascript">
    let cards = document.getElementsByClassName("card");

    let surnames = document.getElementById("surnames");

    function applyFilters()
    {
        var surname = surnames.value;

        var card;
        for(card of cards) {
            var text = card.innerText.trim();
            var showCard = surnames.selectedIndex == 0 || text.startsWith(surname);
            card.style.display = (showCard) ? "block":"none";
        }
    }

    function clearFilter()
    {
        surnames.selectedIndex = 0;
        living.checked = true;
        deceased.checked = true;

        var card;
        for (card of cards)
            card.style.display = "block";
    }
</script>
